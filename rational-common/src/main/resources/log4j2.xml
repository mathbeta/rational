<?xml version="1.0" encoding="UTF-8"?>

<!--
    status : 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出
    monitorInterval : Log4j能够自动检测修改配置文件和重新配置本身, 设置间隔秒数。
-->
<Configuration status="WARN" monitorInterval="60">

    <Properties>
        <!-- 配置日志文件输出目录 -->
        <Property name="LOG_HOME">./logs/rational-common</Property>
    </Properties>

    <Appenders>

        <!--这个输出控制台的配置-->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <!-- 输出日志的格式 -->
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %class{36}.%M:%L - %msg%xEx%n"/>
        </Console>

        <!-- 设置日志格式并配置日志压缩格式(debug.log.年份.gz) -->
        <RollingRandomAccessFile name="debug-appender"
                                 immediateFlush="false" fileName="${LOG_HOME}/debug.log"
                                 filePattern="${LOG_HOME}/debug.log.%d{yyyy-MM-dd}.log.gz">
            <!--
                %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间
                %p : 日志输出格式
                %c : logger的名称
                %m : 日志内容，即 logger.info("message")
                %n : 换行符
                %C : Java类名
                %L : 日志输出所在行数
                %M : 日志输出所在方法名
                hostName : 本地机器名
                hostAddress : 本地ip地址
             -->
            <PatternLayout>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %class{36}.%M:%L - %msg%xEx%n</pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
            </Policies>
        </RollingRandomAccessFile>

        <!-- 设置日志格式并配置日志压缩格式(info.log.年份.gz) -->
        <RollingRandomAccessFile name="info-appender"
                                 immediateFlush="false" fileName="${LOG_HOME}/info.log"
                                 filePattern="${LOG_HOME}/info.log.%d{yyyy-MM-dd}.log.gz">
            <!--
                %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间
                %p : 日志输出格式
                %c : logger的名称
                %m : 日志内容，即 logger.info("message")
                %n : 换行符
                %C : Java类名
                %L : 日志输出所在行数
                %M : 日志输出所在方法名
                hostName : 本地机器名
                hostAddress : 本地ip地址
             -->
            <PatternLayout>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %class{36}.%M:%L - %msg%xEx%n</pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
            </Policies>
        </RollingRandomAccessFile>

        <!-- 设置日志格式并配置日志压缩格式(warn.log.年份.gz) -->
        <RollingRandomAccessFile name="warn-appender"
                                 immediateFlush="false" fileName="${LOG_HOME}/warn.log"
                                 filePattern="${LOG_HOME}/warn.log.%d{yyyy-MM-dd}.log.gz">
            <!--
                %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间
                %p : 日志输出格式
                %c : logger的名称
                %m : 日志内容，即 logger.info("message")
                %n : 换行符
                %C : Java类名
                %L : 日志输出所在行数
                %M : 日志输出所在方法名
                hostName : 本地机器名
                hostAddress : 本地ip地址
             -->
            <PatternLayout>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %class{36}.%M:%L - %msg%xEx%n</pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
            </Policies>
        </RollingRandomAccessFile>

        <!-- 设置日志格式并配置日志压缩格式(error.log.年份.gz) -->
        <RollingRandomAccessFile name="error-appender"
                                 immediateFlush="false" fileName="${LOG_HOME}/error.log"
                                 filePattern="${LOG_HOME}/error.log.%d{yyyy-MM-dd}.log.gz">
            <!--
                %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间
                %p : 日志输出格式
                %c : logger的名称
                %m : 日志内容，即 logger.info("message")
                %n : 换行符
                %C : Java类名
                %L : 日志输出所在行数
                %M : 日志输出所在方法名
                hostName : 本地机器名
                hostAddress : 本地ip地址
             -->
            <PatternLayout>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %class{36}.%M:%L - %msg%xEx%n</pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
            </Policies>
        </RollingRandomAccessFile>


        <!-- DEBUG日志格式 -->
        <!-- <RollingRandomAccessFile name="service_debug_appender"
                                 immediateFlush="false" fileName="${LOG_HOME}/service.log"
                                 filePattern="${LOG_HOME}/service.log.%d{yyyy-MM-dd}.debug.gz">
            <PatternLayout>
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %class{36}.%M:%L - %msg%xEx%n</pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
            </Policies>
        </RollingRandomAccessFile> -->
    </Appenders>

    <Loggers>
        <!-- 配置日志的根节点 -->
        <root level="error">
            <appender-ref ref="Console"/>
        </root>

        <!-- 第三方日志系统 -->
        <logger name="com.iov" level="debug"/>
        <logger name="com.alibaba" level="info"/>
        <logger name="org.apache.zookeeper" level="info"/>
        <logger name="org.eclipse.jetty.servlet.ServletHandler" level="info"/>

        <!-- mybatis -->
        <logger name="com.ibatis" level="debug"/>
        <logger name="com.ibatis.common.jdbc.SimpleDataSource" level="debug"/>
        <logger name="com.ibatis.common.jdbc.ScriptRunner" level="debug"/>
        <logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" level="debug"/>
        <logger name="java.sql.Connection" level="debug"/>
        <logger name="java.sql.Statement" level="debug"/>
        <logger name="java.sql.PreparedStatement" level="info"/>

        <!-- 日志实例(debug),其中'debug-log'继承root,但是root将日志输出控制台,而'debug-log'将日志输出到文件,通过属性'additivity="false"'使'debug-log'的日志不再输出到控制台 -->
        <logger name="debug-log" level="debug" includeLocation="true" additivity="true">
            <appender-ref ref="debug-appender"/>
        </logger>
        <logger name="info-log" level="info" includeLocation="true" additivity="true">
            <appender-ref ref="info-appender"/>
        </logger>
        <logger name="warn-log" level="warn" includeLocation="true" additivity="true">
            <appender-ref ref="warn-appender"/>
        </logger>
        <logger name="error-log" level="error" includeLocation="true" additivity="true">
            <appender-ref ref="error-appender"/>
        </logger>

        <!-- 日志实例(debug) -->
        <!-- <logger name="service_log" level="debug" includeLocation="true" additivity="false">
            <appender-ref ref="service_debug_appender"/>
        </logger> -->

    </Loggers>

</Configuration>